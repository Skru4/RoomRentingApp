@using Microsoft.AspNetCore.Mvc.TagHelpers
@model AllRoomsQueryModel

@{
	ViewBag.Title = "All rooms";
}

<h2 class="text-center">@ViewBag.Title</h2>
<hr />


<form method="get">
	<div class="row">
		<div class="form-group col-md-2 d-flex justify-content-between">
			<div class="form-group">
				<label asp-for="CategoryStatus"></label>
				<select asp-for="CategoryStatus" class="form-control">
					<option value="">All</option>
					@foreach (var category in Model.CategoriesStatus)
					{
						<option value="@category">@category</option>
					}
				</select>
			</div>
		</div>
		<div class="form-group col-md-2 d-flex justify-content-between">
			<div class="form-group">
				<label asp-for="CategorySize"></label>
				<select asp-for="CategorySize" class="form-control">
					<option value="">All</option>
					@foreach (var category in Model.CategoriesSize)
					{
						<option value="@category">@category</option>
					}
				</select>
			</div>
		</div>
		<div class="form-group col-md-2 d-flex justify-content-between">
			<div class="form-group">
				<label asp-for="Town"></label>
				<select asp-for="Town" class="form-control">
					<option value="">All</option>
					@foreach (var town in Model.Towns)
					{
						<option value="@town">@town</option>
					}
				</select>
			</div>
		</div>

		<div class="form-group col-md-2">
			<label asp-for="SearchTerm"></label>
			<input asp-for="SearchTerm" class="form-control" placeholder="...">
		</div>

		<div class="form-group col-md-2">
			<div class="form-group">
				<label asp-for="Sorting"></label>
				<select asp-for="Sorting" class="form-control">
					<option value="0">Best Rating first</option>
					<option value="1">Lowest price first</option>
					<option value="2">Not rented first</option>
				</select>
			</div>
		</div>

		<div class="col-md-2">
			<div class="form-group mt-4 p-2">
				<input type="submit" value="Search" class="btn btn-primary" />
			</div>
		</div>
	</div>
</form>


@{
	var previousPage = Model.CurrentPage - 1;
	if (previousPage < 1)
	{
		previousPage = 1;
	}

	var maxPage = Math.Ceiling((double)Model.TotalRoomsCount /
	                           AllRoomsQueryModel.RoomsPerPage);
}

<div class="row mb-5">
	<div class="col-md-6 d-grid gap-2 d-md-flex justify-content-md-start">
		<a class="btn btn-primary @(Model.CurrentPage == 1 ? "disabled" : string.Empty)"
		   asp-controller="Room"
		   asp-action="All"
		   asp-route-currentPage="@previousPage"
		   asp-route-category="@Model.CategoryStatus"
		   asp-route-category="@Model.CategorySize"
		   asp-route-searchTerm="@Model.SearchTerm"
		   asp-route-town="@Model.Town"
		   asp-route-sorting="@((int)Model.Sorting)"><<</a>
	</div>

	@{
		var shouldButtonBeDisabled = Model.CurrentPage == maxPage ||
		                             !Model.Rooms.Any();
	}

	<div class="col-md-6 d-grid gap-2 d-md-flex justify-content-md-end">
		<a class="btn btn-primary 
           @(shouldButtonBeDisabled ? "disabled" : string.Empty)"
		   asp-controller="Room"
		   asp-action="All"
		   asp-route-currentPage="@(Model.CurrentPage + 1)"
		   asp-route-category="@Model.CategoryStatus"
		   asp-route-category="@Model.CategorySize"
		   asp-route-searchTerm="@Model.SearchTerm"
		   asp-route-town="@Model.Town"
		   asp-route-sorting="@((int)Model.Sorting)">>></a>
	</div>
</div>

@if (!Model.Rooms.Any())
{
	<h2 class="text-center">No rooms found by the given criteria!</h2>
}

<div class="row">
	@foreach (var room in Model.Rooms)
	{
		<partial name="_RoomPartial" model="@room" />
	} 
</div>


