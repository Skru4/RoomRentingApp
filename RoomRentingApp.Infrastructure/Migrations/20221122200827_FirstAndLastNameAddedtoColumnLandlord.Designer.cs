// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RoomRentingApp.Infrastructure.Data;

#nullable disable

namespace RoomRentingApp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221122200827_FirstAndLastNameAddedtoColumnLandlord")]
    partial class FirstAndLastNameAddedtoColumnLandlord
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RoomRentingApp.Infrastructure.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3808cb45-d6fd-4604-9e32-f15574f56f8a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ae8d313-c0b8-4eeb-898d-ed228762da4b",
                            Email = "renter@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            LastName = "Ivanov",
                            LockoutEnabled = false,
                            NormalizedEmail = "renter@abv.bg",
                            NormalizedUserName = "renter",
                            PasswordHash = "AQAAAAEAACcQAAAAEMG8luSX/xK0cDOKnKCFb7bMg9zeJmPWLp9jb4MKVHbLTG2bY8SMFWklg3k2UYiihw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "477591ae-a716-4b8c-bb2e-e205589db691",
                            TwoFactorEnabled = false,
                            UserName = "renter"
                        },
                        new
                        {
                            Id = "3ecf1600-5711-4b55-840a-9ba518a64005",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1b8f3fc-7aef-46d0-8158-f2253cd8dd32",
                            Email = "landlord@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Gosho",
                            LastName = "Goshev",
                            LockoutEnabled = false,
                            NormalizedEmail = "landlord@abv.bg",
                            NormalizedUserName = "landlord",
                            PasswordHash = "AQAAAAEAACcQAAAAEDU8b6OTauMsL+0zYnk6TI685rOYEjNQDCCZxMrcwghOApSWTP/vL5n2PlZBOA3AlA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8ce1058c-cd57-4330-ba56-a2bb5d2b4907",
                            TwoFactorEnabled = false,
                            UserName = "landlord"
                        });
                });

            modelBuilder.Entity("RoomRentingApp.Infrastructure.Models.Landlord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Landlords");

                    b.HasData(
                        new
                        {
                            Id = new Guid("84354850-dc70-4ee8-826c-5ce9114baeb3"),
                            FirstName = "Ivan",
                            LastName = "Ivanov",
                            PhoneNumber = "089999999",
                            UserId = "3ecf1600-5711-4b55-840a-9ba518a64005"
                        });
                });

            modelBuilder.Entity("RoomRentingApp.Infrastructure.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RatingDigit")
                        .HasColumnType("int");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RatingDigit = 9,
                            RoomId = new Guid("c3d04036-cba5-424b-8134-08e10fbd4fbc")
                        },
                        new
                        {
                            Id = 2,
                            RatingDigit = 7,
                            RoomId = new Guid("717bb46a-06e2-4d4b-9b67-471424100ee1")
                        },
                        new
                        {
                            Id = 3,
                            RatingDigit = 10,
                            RoomId = new Guid("1dc7e29a-1d1a-4a4b-ae99-05c8f99922a5")
                        });
                });

            modelBuilder.Entity("RoomRentingApp.Infrastructure.Models.Renter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId")
                        .IsUnique()
                        .HasFilter("[RoomId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Renters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("08d3776c-eb98-434b-9d36-85fb057ca05b"),
                            Job = "Bartender",
                            PhoneNumber = "085555555",
                            RoomId = new Guid("1dc7e29a-1d1a-4a4b-ae99-05c8f99922a5"),
                            UserId = "3808cb45-d6fd-4604-9e32-f15574f56f8a"
                        });
                });

            modelBuilder.Entity("RoomRentingApp.Infrastructure.Models.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("LandlordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PricePerWeek")
                        .HasPrecision(18, 2)
                        .HasColumnType("money");

                    b.Property<Guid?>("RenterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoomCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LandlordId");

                    b.HasIndex("RoomCategoryId");

                    b.HasIndex("TownId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c3d04036-cba5-424b-8134-08e10fbd4fbc"),
                            Address = "1548 Colony Street",
                            Description = "Elegant room with garden view and small bathroom",
                            ImageUrl = "https://clavertonhotel.co.uk/wp-content/uploads/2015/10/King-Size-Four-Poster.jpg",
                            LandlordId = new Guid("84354850-dc70-4ee8-826c-5ce9114baeb3"),
                            PricePerWeek = 200.00m,
                            RoomCategoryId = 1,
                            TownId = 1
                        },
                        new
                        {
                            Id = new Guid("717bb46a-06e2-4d4b-9b67-471424100ee1"),
                            Address = "53 Watson Lane",
                            Description = "Small cozy one-bed room with beautiful balcony and a live-in Landlord",
                            ImageUrl = "https://static.independent.co.uk/2021/07/27/08/20165319-4a072180-9f19-4240-8ff1-e94279ffcace.jpg?quality=75&width=982&height=726&auto=webp",
                            LandlordId = new Guid("84354850-dc70-4ee8-826c-5ce9114baeb3"),
                            PricePerWeek = 90.00m,
                            RoomCategoryId = 2,
                            TownId = 2
                        },
                        new
                        {
                            Id = new Guid("1dc7e29a-1d1a-4a4b-ae99-05c8f99922a5"),
                            Address = "920 Rocket Drive",
                            Description = "Luxurious attic room with double bed and big scenery window",
                            ImageUrl = "http://cdn.home-designing.com/wp-content/uploads/2016/08/rustic-attic-bedroom-wood-burning-fireplace.jpg",
                            LandlordId = new Guid("84354850-dc70-4ee8-826c-5ce9114baeb3"),
                            PricePerWeek = 300.00m,
                            RenterId = new Guid("08d3776c-eb98-434b-9d36-85fb057ca05b"),
                            RoomCategoryId = 3,
                            TownId = 3
                        });
                });

            modelBuilder.Entity("RoomRentingApp.Infrastructure.Models.RoomCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("LandlordStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RoomSize")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("RoomCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LandlordStatus = "Live-out Landlord",
                            RoomSize = "Big"
                        },
                        new
                        {
                            Id = 2,
                            LandlordStatus = "Live-in Landlord",
                            RoomSize = "Small"
                        },
                        new
                        {
                            Id = 3,
                            LandlordStatus = "Live-out Landlord",
                            RoomSize = "Large"
                        });
                });

            modelBuilder.Entity("RoomRentingApp.Infrastructure.Models.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Towns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Minneapolis"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Worcester"
                        },
                        new
                        {
                            Id = 3,
                            Name = "San Angelo"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RoomRentingApp.Infrastructure.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RoomRentingApp.Infrastructure.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoomRentingApp.Infrastructure.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RoomRentingApp.Infrastructure.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoomRentingApp.Infrastructure.Models.Landlord", b =>
                {
                    b.HasOne("RoomRentingApp.Infrastructure.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RoomRentingApp.Infrastructure.Models.Rating", b =>
                {
                    b.HasOne("RoomRentingApp.Infrastructure.Models.Room", "Room")
                        .WithMany("Ratings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("RoomRentingApp.Infrastructure.Models.Renter", b =>
                {
                    b.HasOne("RoomRentingApp.Infrastructure.Models.Room", "Room")
                        .WithOne("Renter")
                        .HasForeignKey("RoomRentingApp.Infrastructure.Models.Renter", "RoomId");

                    b.HasOne("RoomRentingApp.Infrastructure.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RoomRentingApp.Infrastructure.Models.Room", b =>
                {
                    b.HasOne("RoomRentingApp.Infrastructure.Models.Landlord", "Landlord")
                        .WithMany("RoomsToRent")
                        .HasForeignKey("LandlordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoomRentingApp.Infrastructure.Models.RoomCategory", "RoomCategory")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoomRentingApp.Infrastructure.Models.Town", "Town")
                        .WithMany("Rooms")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Landlord");

                    b.Navigation("RoomCategory");

                    b.Navigation("Town");
                });

            modelBuilder.Entity("RoomRentingApp.Infrastructure.Models.Landlord", b =>
                {
                    b.Navigation("RoomsToRent");
                });

            modelBuilder.Entity("RoomRentingApp.Infrastructure.Models.Room", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("RoomRentingApp.Infrastructure.Models.RoomCategory", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("RoomRentingApp.Infrastructure.Models.Town", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
